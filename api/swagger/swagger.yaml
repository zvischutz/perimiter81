swagger: "2.0"
info:
  version: "0.0.1"
  title: Pizza Delivery App
  description: >
    This app supports the Pizza delivery exercise from Perimiter81.
    Basically there are services to add/modify/get and delete users, login services and cart services.
    This enables the processes for supporting what was required on exercise. 
    
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths 
basePath: /
# 
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /user:
    # binds a127 app logic to a route
    x-swagger-router-controller: users
    get:
      description: Returns user details by Id
      # used as the method name of the controller
      operationId: get
      parameters:
        - name: id
          in: query
          description: The id of the user
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UserResponse"
        "404":
          description: Id not found
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        "500":
          description: Unexpected error
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: create a new user 
      operationId: create
      parameters:
        - in: body
          name: newUser
          description: The user to create. Note email_address will be used as username.
          schema:
            $ref: '#/definitions/UserRequest' 
      responses:
        "201":
          description: Success, new user created
          schema:
            $ref: "#/definitions/IDRequestResponse"
        "500":
          description: Unexpected error
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update a user 
      operationId: update
      parameters:
        - in: body
          name: updateUser
          description: The user details to update.
          schema:
            $ref: '#/definitions/UpdateUserRequest' 
      responses:
        "201":
          description: Success, user updated
          schema:
            $ref: "#/definitions/IDRequestResponse"
        "404":
          description: Id not found
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        "500":
          description: Unexpected error
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    delete:
      description: delete a user 
      operationId: delete
      parameters:
        - in: body
          name: deleteUser
          description: The user id to delete.
          schema:
            $ref: '#/definitions/IDRequestResponse' 
      responses:
        "201":
          description: Success, user deleted
          schema:
            $ref: "#/definitions/IDRequestResponse"
        "404":
          description: Id not found
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        "500":
          description: Unexpected error
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/login:
    # binds a127 app logic to a route
    x-swagger-router-controller: users
    post:
      description: Login a user 
      operationId: login
      parameters:
        - in: body
          name: loginUser
          description: The user to login.
          schema:
            $ref: '#/definitions/LoginRequest' 
      responses:
        "200":
          description: Success, user login
          schema:
            $ref: "#/definitions/IDRequestResponse"
        "403":
          description: Invalid login
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        "500":
          description: Unexpected error
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/logout:
    # binds a127 app logic to a route
    x-swagger-router-controller: users
    post:
      description: Logout a user 
      operationId: logout
      parameters:
        - in: body
          name: logoutUser
          description: The user to logout.
          schema:
            $ref: '#/definitions/UsernameRequest' 
      responses:
        "200":
          description: Success, user logout
          schema:
            $ref: "#/definitions/IDRequestResponse"
        "500":
          description: Unexpected error
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/isLogin:
    # binds a127 app logic to a route
    x-swagger-router-controller: users
    post:
      description: Is a user login? 
      operationId: isLogin
      parameters:
        - in: body
          name: loginUser
          description: The user to check if it is logged in.
          schema:
            $ref: '#/definitions/UsernameRequest' 
      responses:
        "200":
          description: Success, returns true if login and false otherwise
          schema:
            $ref: "#/definitions/TrueFalseResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/cart:
    # binds a127 app logic to a route
    x-swagger-router-controller: users
    post:
      description: Add an order to user cart
      operationId: addToCart
      parameters:
        - in: body
          name: cartData
          description: The cart data to add to user
          schema:
            $ref: '#/definitions/CartDataRequest' 
      responses:
        "201":
          description: Added successfully to Cart
          schema:
            $ref: "#/definitions/TrueFalseResponse"
        "400":
          description: Illegal parameters sent
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user/cart/checkout:
    # binds a127 app logic to a route
    x-swagger-router-controller: users
    post:
      description: checkout cart
      operationId: checkout
      parameters:
        - in: body
          name: username
          description: The cart data to add to user
          schema:
            $ref: '#/definitions/UsernameRequest' 
      responses:
        "201":
          description: Added successfully to Cart
          schema:
            $ref: "#/definitions/TrueFalseResponse"
        "400":
          description: Illegal parameters sent
          schema:
            $ref: "#/definitions/CustomErrorResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /products:
    # binds a127 app logic to a route
    x-swagger-router-controller: products
    get:
      description: Get all products for logged in user 
      operationId: getAllProducts
      parameters:
        - name: username
          in: query
          type: string
          description: the username to work with in this case
      responses:
        "200":
          description: returns all products if logged in and null if nor
          schema:
            $ref: "#/definitions/ProductsResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  UpdateUserRequest:
    required:
      - id
    properties:
      id:
        type: integer
      name:
        type: string
      email_address:
        description: Will be used as username also!
        type: string
      street_address:
        type: string
      password:
        type: string
        minLength: 8
  LoginRequest:
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
        minLength: 8
  UsernameRequest:
    required:
      - username
    properties:
      username:
        type: string
  UserRequest:
    required:
      - name
      - email_address
      - password
    properties:
      name:
        type: string
      email_address: 
        description: Will be used as username also!
        type: string
      street_address:
        type: string
      password:
        type: string
        minLength: 8
  IDRequestResponse:
    required:
      - id
    properties:
      id:
        type: number
  TrueFalseResponse:
    required:
      - response
    properties:
      response:
        type: boolean
  UserResponse:
    required:
      - id
    properties:
      id:
        type: number
      name:
        type: string
      email_address: 
        type: string
      street_address:
        type: string
  CustomErrorResponse:
    required:
      - error
    properties:
      error:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  Product:
    properties:
      name:
        type: string
      price:
        type: number
        format: float
      onStock: 
        type: integer
  ProductsResponse:
    type: array
    items:
      $ref: '#/definitions/Product'
  CartDataRequest:
    required:
      - username
      - productName
      - quantity
    properties:
      username:
        type: string
      productName:
        type: string
      quantity:
        type: integer
        default: 1